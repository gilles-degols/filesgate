filesgate {

  akka {
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]
    loglevel = "DEBUG"

    log-dead-letters = 0
    log-dead-letters-during-shutdown = true

    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2200
      }
    }
  }


  internal {
    engine-actor {
      check-pipeline-manager-state-ms = 5000
      check-pipeline-instance-state-ms = 5000
    }
  }

  storage {
    # Default storage for downloaded files. This can be overrided on a file-basis and changed whenever
    # you want.
    content {
      # If we never want to save file information, we can deactivate the storing of files. This
      # can be useful if you want to compute some information from the file, and not store any result
      # through FilesGate.
      activate = true
      mongo {
        uri = "localhost:27017"
      }
    }

    # Default storage for the internal working of FilesGate. This should not changed once installed, otherwise
    # migration scripts are needed
    metadata {
      mongo {
        hosts = "localhost:27017"
        database = "filesgate"
        collection = "filesStatus"
      }
    }
  }

  # Various settings having an impact on the performance of the system. Tune it according
  # to your needs
  performance {
    # Threads used for every part of the system (download, pre-post processing, ...)
    threads = 2
  }

  # List of the different pipelines we want to have
  pipelines {
    # Name of the pipeline as key
    example {
      # To detect if the current pipeline should be used with a given message
      matcher = "default.matcher"

      # List of expected steps we need to have before allowing the system to start. This is necessary has we need to have
      # every pipeline step to be able to process a file correctly. The number of actor instances for each of those step-ids
      # is handled by the developer when he extends the EngineLeader and ask instances with those specific names
      steps = [
        {type: "predownload",name: "default.preDownload"},
        {type: "prestorage", name: "default.preStorage"},
        {type: "poststorage",name: "default.postStorage"}
      ]

      # The name of the pipeline instance to use for this pipeline
      pipeline-instance-name = "Core.PipelineInstanceActor"
      # Number of PipelineInstances. Only useful if we use the default PipelineInstance
      default-instances = 2
    }
  }
}
