priority-stashed-actor {
  mailbox-type = "net.degols.libs.filesgate.utils.PriorityStashedMailbox"
}

filesgate {

  akka {
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]
    loglevel = "DEBUG"

    log-dead-letters = 0
    log-dead-letters-during-shutdown = true

    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }

    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2200
      }
    }
  }


  internal {
    engine-actor {
      // To reduce concurrency issues, you should not put a value smaller than 5-10 s for each of the following attributes
      check-pipeline-manager-state-ms = 5000
      check-pipeline-instance-state-ms = 5000
      check-pipeline-step-state-ms = 5000
    }

    pipeline {
      // Default timeout between steps, applied for any step. Can be overrided step-per-step
      timeout-step-ms = 120000 # 120000 ms would be more reasonable. Set a small value for debugging
    }
  }

  storage {
    # Default storage for downloaded files. This can be overrided on a file-basis and changed whenever
    # you want.
    content {
      mongo {
        uri = "mongodb://localhost:27017"
      }
    }

    # Default storage for the internal working of FilesGate. This should not changed once installed, otherwise
    # migration scripts are needed
    metadata {
      mongo {
        uri = "mongodb://localhost:27017"
        database = "filesgate"
        collection = "filesStatus"
      }
    }
  }


  # Various settings having an impact on the performance of the system. Tune it according
  # to your needs
  performance {
    # Threads used for every part of the system (download, pre-post processing, ...)
    threads = 2
  }

  # List of the different pipelines we want to have
  pipelines {
    # Name of the pipeline as key
    example {

      # Not mandatory, this is a configuration to automatically fetch the data from well known data sources (kafka, MongoDB, ...)
      # TODO: Implement it
      default-steps {
        source {
          "Core:package:default-source.kafka" {
            bootstrap-servers = ["localhost:27017"]
            topic = []
            partitions = 2 // We should fetch it dynamically if possible...
          }

          json-mapping {
            url = "url"
          }
        }
      }

      # List of expected steps we need to have before allowing the system to start. This is necessary has we need to have
      # every pipeline step to be able to process a file correctly. The number of actor instances for each of those step-ids
      # is handled by the developer when he extends the EngineLeader and ask instances with those specific names.
      # The "name" of every step is unique for a pipeline (automatically the pipeline id will be added).
      # If we want to limit the number of instances used by the current pipeline (instance), we can provide a limitation on the number
      # of involved actors. if the value does not exist or is set to -1, any number can be used based on the one available in the cluster.
      steps = [
        # Where should we fetch the data? This step is the only one mandatory. The "sink" is not even mandatory.
        {type: "source", name:"default.source", balancer.max-instances:1, timeout-step-ms=1000},

        # To detect if the current pipeline should be used with a given message
        {type: "matcher", name:"default.matcher", balancer.max-instances:1},

        {type: "predownload",name: "default.preDownload", balancer.max-instances: 1},
        {type: "download",name: "default.download", balancer.max-instances: 1},
        {type: "prestorage", name: "default.preStorage", balancer.max-instances: 1},
        {type: "storage", name: "Core.Storage", db-service: "Core.MongoContent", balancer.max-instances: 1},
        {type: "poststorage",name: "default.postStorage", balancer.max-instances: 1}

        {type: "metadata",name: "Core.Metadata", db-service: "Core.MongoMetadata", balancer.max-instances: 1},
        {type: "postmetadata",name: "postMetadata", balancer.max-instances: 1},

        # Specific instance in charge of storing failed processing steps (to allow storing the failed messages
        # in a db, and having a custom source created by the developer to re-process old messages).
        # This step is executed at the end of the pipeline, but any message can be received.
        {type: "failurehandling",name: "Core.FailureHandling", db-service: "Core.MongoMetadata", balancer.max-instances: 1}
      ]

      # The configuration for the number of pipeline instance to use for this pipeline (more specifically the load balancer).
      # A PipelineInstance is only in charge of one Pipeline id.
      # This is default configuration, in the future, we will allow the EngineLeader to override it.
      pipeline-instance {
        # Number of PipelineInstances.
        quantity = 1
      }

      # Should we restart the pipeline if it finishes "succesfully"
      restart-when-finished = false

      enabled = false
    }
  }
}
